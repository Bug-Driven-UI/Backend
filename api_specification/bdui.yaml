openapi: 3.1.0
info:
  title: BDUI API
  version: 1.0.0
  description: |
    Спецификация OpenAPI для Backend-Driven UI  приложения

tags:
  - name: AdminScreen
    description: Операции с экранами из админки
  - name: ClientEngine
    description: Операции с экранами для выдачи клиенту
  - name: AdminTemplates
    description: Операции с шаблонами из админки
  - name: AdminAPIRegistry
    description: Операции с реестром внешних API
  - name: AdminCommands
    description: Операции по работе с командами
  - name: AdminTextStyles
    description: Операции по работе с текстовыми стилями
  - name: AdminColorStyles
    description: Операции по работе с стилями цветов

paths:
  # AdminScreen
  /v1/getScreenNames:
    post:
      summary: Получить список названий экранов
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenNamesRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseError'

  /v1/getScreenVersions:
    post:
      summary: Получить список версий экрана
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenVersionRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenVersionResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenVersionResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenVersionResponseError'

  /v1/setProductionVersion:
    post:
      summary: Сделать версию экрана продовой
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetProductionVersionRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetProductionVersionResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetProductionVersionResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetProductionVersionResponseError'

  /v1/getScreen:
    post:
      summary: Получить описание экрана
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenRequest"

      responses:
        '200':
          description: Успешный ответ или ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
  /v1/updateScreen:
    put:
      summary: Обновить скелет экрана
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenUpdateRequest'
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenUpdateResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenUpdateResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenUpdateResponseError'

  /v1/saveScreen:
    post:
      summary: Сохранить новый экран
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenForSave"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
  /v1/deleteScreen:
    delete:
      summary: Удаление экрана (целиком, вместе со всеми версиями)
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenDeleteRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenDeleteResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenDeleteResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenDeleteResponseError'

  # AdminAPI

  /v1/saveAPI:
    post:
      summary: Сохранить внешнее API
      tags: [ AdminAPIRegistry ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiRepresentationForSave"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISaveResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISaveResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APISaveResponseError'

  /v1/updateAPI:
    put:
      summary: Обновить внешнее API
      tags: [ AdminAPIRegistry ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIUpdateRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUpdateResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUpdateResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUpdateResponseError'

  /v1/deleteAPI:
    delete:
      summary: Удалить внешнее API
      tags: [ AdminAPIRegistry ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIDeleteRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDeleteResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDeleteResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDeleteResponseError'

  /v1/getAPI:
    post:
      summary: Получить внешнее API
      tags: [ AdminAPIRegistry ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APIRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseError'

  /v1/getAPINames:
    post:
      summary: Получить список названий существующих внешних API по query
      tags: [ AdminAPIRegistry ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APINamesRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APINamesResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APINamesResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APINamesResponseError'

  # AdminTextStyles

  /v1/saveTextStyle:
    post:
      summary: Сохранить стиль текста
      tags: [ AdminTextStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextStyleSaveRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleSaveResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleSaveResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleSaveResponseError'

  /v1/updateTextStyle:
    put:
      summary: Обновить стиль текста
      tags: [ AdminTextStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextStyleUpdateRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleUpdateResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleUpdateResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUpdateResponseError'

  /v1/deleteTextStyle:
    delete:
      summary: Удалить стиль текста
      tags: [ AdminTextStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextStyleDeleteRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleDeleteResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleDeleteResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleDeleteResponseError'

  /v1/getTextStyle:
    post:
      summary: Получить стиль текста
      tags: [ AdminTextStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextStyleRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStyleResponseError'

  /v1/getTextStylesByToken:
    post:
      summary: Получить список токенов существующих текстовых стилей по query
      tags: [ AdminTextStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextStylesByTokenRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStylesByTokenResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStylesByTokenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TextStylesByTokenResponseError'

  # AdminColorStyles

  /v1/saveColorStyle:
    post:
      summary: Сохранить стиль цвета
      tags: [ AdminColorStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColorStyleForSave"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleSaveResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleSaveResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleSaveResponseError'

  /v1/updateColorStyle:
    put:
      summary: Обновить стиль цвета
      tags: [ AdminColorStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColorStyleUpdateRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleUpdateResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleUpdateResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleUpdateResponseError'

  /v1/deleteColorStyle:
    delete:
      summary: Удалить стиль цвета
      tags: [ AdminColorStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColorStyleDeleteRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleDeleteResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleDeleteResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleDeleteResponseError'

  /v1/getColorStyle:
    post:
      summary: Получить стиль цвета
      tags: [ AdminColorStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColorStyleRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStyleResponseError'

  /v1/getColorStylesByToken:
    post:
      summary: Получить список токенов существующих цветов по query
      tags: [ AdminColorStyles ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ColorStylesByTokenRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStylesByTokenResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStylesByTokenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorStylesByTokenResponseError'

  # AdminCommands

  /v1/saveCommand:
    post:
      summary: Сохранить команду
      tags: [ AdminCommands ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandForSave"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandSaveResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandSaveResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandSaveResponseError'

  /v1/updateCommand:
    put:
      summary: Обновить команду
      tags: [ AdminCommands ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandUpdateRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandUpdateResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandUpdateResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandUpdateResponseError'

  /v1/deleteCommand:
    delete:
      summary: Удалить команду
      tags: [ AdminCommands ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandDeleteRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDeleteResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDeleteResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandDeleteResponseError'

  /v1/getCommand:
    post:
      summary: Получить команду
      tags: [ AdminCommands ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandResponseError'

  /v1/getCommandsByName:
    post:
      summary: Получить список команд по query названию
      tags: [ AdminCommands ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommandsByNameRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandsByNameResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandsByNameResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommandsByNameResponseError'

  # ClientEngine
  /v1/renderScreen:
    post:
      summary: Получить экран с данными для отрисовки
      tags: [ ClientEngine ]
      parameters:
        - in: header
          required: true
          name: userId
          description: "Идентификатор пользователя, от которого выполняется запрос"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenRenderRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'

components:
  schemas:
    # ADMIN MODELS (Модели для админки)
    ScreenRequest:
      description: "Запрос на получение скелета экрана"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ screenId ]
          properties:
            screenId:
              type: string
              format: uuid
              description: "Идентификатор экрана"
            versionId:
              type: string
              format: uuid
              description: "Идентификатор версии экрана. Если null, возвращается последняя версия"

    ScreenResponseSuccess:
      type: object
      required: [ screen ]
      properties:
        type:
          const: success
        screen:
          $ref: '#/components/schemas/Screen'
      additionalProperties: false

    ScreenResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    SetProductionVersionRequest:
      description: "Запрос на установки версии экрана, как продовой"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ screenId, versionId ]
          properties:
            screenId:
              type: string
              format: uuid
              description: "Идентификатор экрана"
            versionId:
              type: string
              format: uuid
              description: "Идентификатор версии, которую требуется сделать продовой"

    SetProductionVersionResponseSuccess:
      type: object
      required: [ screen ]
      properties:
        type:
          const: success
        version:
          $ref: '#/components/schemas/ScreenVersion'
      additionalProperties: false

    SetProductionVersionResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenVersionRequest:
      description: "Запрос на получение версий экрана"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ screenId ]
          properties:
            screenId:
              type: string
              format: uuid
              description: "Идентификатор экрана"

    ScreenVersionResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ versions ]
          properties:
            versions:
              type: array
              items:
                $ref: '#/components/schemas/ScreenVersion'

      additionalProperties: false

    ScreenVersionResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenSaveResponseSuccess:
      type: object
      properties:
        type:
          const: success
        screen:
          $ref: '#/components/schemas/Screen'
      additionalProperties: false

    ScreenSaveResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenDeleteRequest:
      description: Запрос на удаление экрана
      type: object
      required: [ data ]
      properties:
        data:
          required: [ screenId ]
          properties:
            screenId:
              type: string
              description: "Идентификатор экрана"

    ScreenDeleteResponseSuccess:
      type: object
      properties:
        type:
          const: success
        message:
          type: string
      additionalProperties: false

    ScreenDeleteResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenUpdateRequest:
      description: "Запрос на обновление экрана"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ screenId, versionId, screen ]
          properties:
            screenId:
              type: string
              format: uuid
              description: Идентификатор экрана
            versionId:
              type: string
              format: uuid
              description: Идентификатор версии
            screen:
              $ref: "#/components/schemas/ScreenForSave"

    ScreenUpdateResponseSuccess:
      type: object
      properties:
        type:
          const: success
        version:
          $ref: '#/components/schemas/ScreenVersion'
      additionalProperties: false

    ScreenUpdateResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenNamesRequest:
      description: "Запрос на получение всех экранов по названию"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Название экрана"

    ScreenNamesResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ screenNames ]
          properties:
            screenNames:
              type: array
              items:
                type: object
                required: [ id, name, description ]
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  description:
                    type: string
      additionalProperties: false

    ScreenNamesResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    TextStyleSaveRequest:
      description: "Запрос на сохранение стиля текста"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            textStyle:
              $ref: '#/components/schemas/TextStyleForSave'

    TextStyleSaveResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ textStyle ]
          properties:
            textStyle:
              $ref: '#/components/schemas/TextStyleWithId'
      additionalProperties: false

    TextStyleSaveResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    TextStyleUpdateRequest:
      description: "Запрос на обновление стиля текста"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id, textStyle ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор текстового стиля
            textStyle:
              $ref: "#/components/schemas/TextStyleForSave"

    TextStyleUpdateResponseSuccess:
      type: object
      properties:
        type:
          const: success
        textStyle:
          $ref: '#/components/schemas/TextStyleWithId'
      additionalProperties: false

    TextStyleUpdateResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    TextStyleDeleteRequest:
      description: Запрос на удаление текстового стиля
      type: object
      required: [ data ]
      properties:
        data:
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: "Идентификатор текстового стиля"

    TextStyleDeleteResponseSuccess:
      type: object
      properties:
        type:
          const: success
        message:
          type: string
      additionalProperties: false

    TextStyleDeleteResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    TextStyleRequest:
      description: "Запрос на получение стиля текста"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор текстового стиля

    TextStyleResponseSuccess:
      type: object
      properties:
        type:
          const: success
        textStyle:
          $ref: '#/components/schemas/TextStyleWithId'
      additionalProperties: false

    TextStyleResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    TextStylesByTokenRequest:
      description: "Запрос на получение всех текстовых стилей по query токену"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Токен стиля"

    TextStylesByTokenResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ textStyles ]
          properties:
            textStyles:
              type: array
              items:
                type: object
                required: [ id, token ]
                properties:
                  id:
                    type: string
                    format: uuid
                  token:
                    type: string
      additionalProperties: false

    TextStylesByTokenResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ErrorContent:
      type: object
      description: "Содержимое ошибки"
      required: [ timestampMs, message ]
      properties:
        timestampMs:
          type: integer
          format: int64
          description: "Время формирования ошибки (в мс)"
        message:
          type: string
          description: "Описание ошибки"
      additionalProperties: false

    # Модели запросов и ответов для стилей цветов

    ColorStyleSaveRequest:
      description: "Запрос на сохранение стиля цвета"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            textStyle:
              $ref: '#/components/schemas/ColorStyleForSave'

    ColorStyleSaveResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ colorStyle ]
          properties:
            colorStyle:
              $ref: '#/components/schemas/ColorStyleWithId'
      additionalProperties: false

    ColorStyleSaveResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ColorStyleUpdateRequest:
      description: "Запрос на обновление стиля цвета"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id, colorStyle ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор стиля цвета
            colorStyle:
              $ref: "#/components/schemas/ColorStyleForSave"

    ColorStyleUpdateResponseSuccess:
      type: object
      properties:
        type:
          const: success
        colorStyle:
          $ref: '#/components/schemas/ColorStyleWithId'
      additionalProperties: false

    ColorStyleUpdateResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ColorStyleDeleteRequest:
      description: Запрос на удаление стиля цвета
      type: object
      required: [ data ]
      properties:
        data:
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: "Идентификатор стиля цвета"

    ColorStyleDeleteResponseSuccess:
      type: object
      properties:
        type:
          const: success
        message:
          type: string
      additionalProperties: false

    ColorStyleDeleteResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ColorStyleRequest:
      description: "Запрос на получение стиля цвета"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор стиля цвета

    ColorStyleResponseSuccess:
      type: object
      properties:
        type:
          const: success
        colorStyle:
          $ref: '#/components/schemas/ColorStyleWithId'
      additionalProperties: false

    ColorStyleResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ColorStylesByTokenRequest:
      description: "Запрос на получение всех стилей цветов по query токену"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Токен стиля"

    ColorStylesByTokenResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ colorStyles ]
          properties:
            colorStyles:
              type: array
              items:
                type: object
                required: [ id, token ]
                properties:
                  id:
                    type: string
                    format: uuid
                  token:
                    type: string
      additionalProperties: false

    ColorStylesByTokenResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    # Модели команд из реестра

    CommandSaveRequest:
      description: "Запрос на сохранение команды"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            textStyle:
              $ref: '#/components/schemas/CommandForSave'

    CommandSaveResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ command ]
          properties:
            command:
              $ref: '#/components/schemas/Command'
      additionalProperties: false

    CommandSaveResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    CommandUpdateRequest:
      description: "Запрос на обновление команды"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id, command ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор команды
            command:
              $ref: "#/components/schemas/CommandForSave"

    CommandUpdateResponseSuccess:
      type: object
      properties:
        type:
          const: success
        command:
          $ref: '#/components/schemas/Command'
      additionalProperties: false

    CommandUpdateResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    CommandDeleteRequest:
      description: Запрос на удаление команды
      type: object
      required: [ data ]
      properties:
        data:
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: "Идентификатор команды"

    CommandDeleteResponseSuccess:
      type: object
      properties:
        type:
          const: success
        message:
          type: string
      additionalProperties: false

    CommandDeleteResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    CommandRequest:
      description: "Запрос на получение команды"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ id ]
          properties:
            id:
              type: string
              format: uuid
              description: Идентификатор команды

    CommandResponseSuccess:
      type: object
      properties:
        type:
          const: success
        command:
          $ref: '#/components/schemas/Command'
      additionalProperties: false

    CommandResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    CommandsByNameRequest:
      description: "Запрос на получение всех команд по query имени"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Название команды"

    CommandsByNameResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ commands ]
          properties:
            commands:
              type: array
              items:
                type: object
                required: [ id, name ]
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
      additionalProperties: false

    CommandsByNameResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    # Модели запросов и ответов для реестра API

    APISaveResponseSuccess:
      type: object
      required: [ type, api ]
      properties:
        type:
          const: success
        api:
          $ref: '#/components/schemas/ApiRepresentation'
      additionalProperties: false

    APISaveResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    APIUpdateRequest:
      description: "Запрос на обновление API"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ apiId, api ]
          properties:
            apiId:
              type: string
              format: uuid
              description: Идентификатор экрана
            api:
              $ref: "#/components/schemas/ApiRepresentationForSave"

    APIUpdateResponseSuccess:
      type: object
      required: [ type, api ]
      properties:
        type:
          const: success
        api:
          $ref: '#/components/schemas/ApiRepresentation'
      additionalProperties: false

    APIUpdateResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    APIDeleteRequest:
      description: Запрос на удаление API
      type: object
      required: [ data ]
      properties:
        data:
          required: [ apiId ]
          properties:
            apiId:
              type: string
              format: uuid
              description: "Идентификатор API"

    APIDeleteResponseSuccess:
      type: object
      properties:
        type:
          const: success
        message:
          type: string
      additionalProperties: false

    APIDeleteResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    APIRequest:
      description: "Запрос на получение API"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          required: [ apiId ]
          properties:
            apiId:
              type: string
              format: uuid
              description: "Идентификатор экрана"

    APIResponseSuccess:
      type: object
      required: [ api ]
      properties:
        type:
          const: success
        api:
          $ref: '#/components/schemas/ApiRepresentation'
      additionalProperties: false

    APIResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    APINamesRequest:
      description: "Запрос на получение всех API по названию"
      type: object
      required: [ data ]
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Название API"

    APINamesResponseSuccess:
      type: object
      required: [ type, data ]
      properties:
        type:
          const: success
        data:
          type: object
          required: [ apiNames ]
          properties:
            apiNames:
              type: array
              items:
                type: object
                required: [ id, name, description ]
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  description:
                    type: string
      additionalProperties: false

    APINamesResponseError:
      type: object
      required: [ errors ]
      properties:
        type:
          const: error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    Screen:
      type: object
      required: [ screenId, screenName, version, components, apis ]
      properties:
        screenId:
          type: string
          format: uuid
        screenName:
          type: string
        version:
          $ref: '#/components/schemas/ScreenVersion'
        screenNavigationParams:
          type: array
          items:
            type: string
        apis:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ShortApiRepresentation'
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        scaffold:
          $ref: '#/components/schemas/Scaffold'
        textStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TextStyle'
        colorStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    ScreenForSave:
      type: object
      required: [ screenName, components, apis ]
      properties:
        screenName:
          type: string
        screenNavigationParams:
          type: array
          items:
            type: string
        apis:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ShortApiRepresentation'
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        scaffold:
          $ref: '#/components/schemas/Scaffold'
        textStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TextStyle'
        colorStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    ScreenVersion:
      type: object
      required: [ id, version, isProduction, createdAtTimestampMs ]
      properties:
        id:
          type: string
          format: uuid
        version:
          type: string
        isProduction:
          type: boolean
          description: "Используется ли эта версия прямо сейчас на продакшене"
        createdAtTimestampMs:
          type: int64
          description: "Время создания версии в мс"
        lastModifiedTimestampMs:
          type: int64
          description: "Время изменения версии в мс"

    Scaffold:
      type: object
      properties:
        topBar:
          $ref: '#/components/schemas/Component'
        bottomBar:
          $ref: '#/components/schemas/Component'
      additionalProperties: false

    Command:
      type: object
      description: "Представление команды из реестра"
      required: [ id, name, commandParams, apis, createdAtTimestampMs ]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: "Название команды"
        commandParams:
          type: array
          description: "Параметры, требующиеся для исполнения команды"
          items:
            type: string
          uniqueItems: true
        apis:
          type: object
          description: "Внешние API, требующиеся для исполнения команды; ключ — имя зависимости, значение — краткое представление API"
          additionalProperties:
            ref: '#/components/schemas/ShortApiRepresentation'
        itemTemplate:
          $ref: '#/components/schemas/ComponentTemplate'
          description: "Шаблон для заполнения ответа от команды (если указан)"
        fallbackMessage:
          type: string
          description: "Сообщение об ошибке, в случае неудачного исполнения команды"
        createdAtTimestampMs:
          type: int64
        lastModifiedAtTimestampMs:
          type: int64

    CommandForSave:
      type: object
      description: "Представление команды из реестра"
      required: [ name, commandParams, apis ]
      properties:
        name:
          type: string
          description: "Название команды"
        commandParams:
          type: array
          description: "Параметры, требующиеся для исполнения команды"
          items:
            type: string
          uniqueItems: true
        apis:
          type: object
          description: "Внешние API, требующиеся для исполнения команды; ключ — имя зависимости, значение — краткое представление API"
          additionalProperties:
            ref: '#/components/schemas/ShortApiRepresentation'
        itemTemplate:
          $ref: '#/components/schemas/ComponentTemplate'
          description: "Шаблон для заполнения ответа от команды (если указан)"
        fallbackMessage:
          type: string
          description: "Сообщение об ошибке, в случае неудачного исполнения команды"

    TextStyle:
      type: object
      required: [ token ]
      properties:
        token:
          type: string
      additionalProperties: false

    TextStyleForSave:
      type: object
      required: [ token, size ]
      properties:
        token:
          type: string
        size:
          type: integer
        weight:
          type: integer
        decoration:
          $ref: '#/components/schemas/TextDecorationType'

    TextStyleWithId:
      type: object
      required: [ id, token, size ]
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        size:
          type: integer
        weight:
          type: integer
        decoration:
          $ref: '#/components/schemas/TextDecorationType'

    TextDecorationType:
      type: string
      enum: [ overline, bold, italic, underline, strikeThrough, strikeThroughRed ]

    ColorStyle:
      type: object
      required: [ token ]
      properties:
        token:
          type: string
      additionalProperties: false

    ColorStyleForSave:
      type: object
      required: [ token, color ]
      properties:
        token:
          type: string
        color:
          type: string
          description: "Цвет в HEX"

    ColorStyleWithId:
      type: object
      required: [ id, token, color ]
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        color:
          type: string
          description: "Цвет в HEX"

    StatefulComponent:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          properties:
            type:
              const: stateful
            states:
              type: array
              items:
                $ref: '#/components/schemas/StateDefinition'
          required: [ type, states ]
          additionalProperties: false

    StateDefinition:
      type: object
      required: [ condition, component ]
      properties:
        condition:
          type: string
        component:
          $ref: '#/components/schemas/Component'

    DynamicColumn:
      allOf:
        - $ref: '#/components/schemas/DynamicCompositeBase'
        - type: object
          properties:
            type:
              const: dynamicColumn
          required: [ type ]
          additionalProperties: false

    DynamicRow:
      allOf:
        - $ref: '#/components/schemas/DynamicCompositeBase'
        - type: object
          properties:
            type:
              const: dynamicRow
          required: [ type ]
          additionalProperties: false

    ShortApiRepresentation:
      type: object
      required: [ apiName, apiParams ]
      properties:
        apiName:
          type: string
        apiParams:
          type: array
          items:
            type: string
      additionalProperties: false

    Insets:
      type: object
      required: [ left, right, bottom, top ]
      properties:
        left: { type: integer, default: 0 }
        right: { type: integer, default: 0 }
        bottom: { type: integer, default: 0 }
        top: { type: integer, default: 0 }
      additionalProperties: false

    Action:
      required: [ type ]
      description: "Вызываемое действие при взаимодействии"
      oneOf:
        - $ref: '#/components/schemas/CommandAction'
        - $ref: '#/components/schemas/UpdateScreenAction'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/CommandAction'
          updateScreen: '#/components/schemas/UpdateScreenAction'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    CommandAction:
      allOf:
        - type: object
          required: [ type, name ]
          properties:
            type:
              const: command
            name:
              type: string
              description: "Название команды, которую нужно исполнить"
            params:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    UpdateScreenAction:
      allOf:
        - type: object
          required: [ type, screenName ]
          properties:
            type:
              const: updateScreen
            screenName:
              type: string
              description: "Название экрана"
            screenNavigationParams:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    Interaction:
      type: object
      description: Базовая модель взаимодействия.
      required: [ type, actions ]
      properties:
        type:
          type: string
          enum: [ onClick, onShow ]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
      additionalProperties: true

    Size:
      required: [ type ]
      description: "Полиморфный размер"
      oneOf:
        - $ref: '#/components/schemas/SizeFixed'
        - $ref: '#/components/schemas/SizeWeighted'
        - $ref: '#/components/schemas/SizeMatchParent'
        - $ref: '#/components/schemas/SizeWrapContent'
      discriminator:
        propertyName: type
        mapping:
          fixed: '#/components/schemas/SizeFixed'
          weighted: '#/components/schemas/SizeWeighted'
          matchParent: '#/components/schemas/SizeMatchParent'
          wrapContent: '#/components/schemas/SizeWrapContent'
      properties:
        type:
          type: string
          description: "Допустимые значения: fixed, weighted, matchParent, wrapContent"
      unevaluatedProperties: false

    SizeBase:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ fixed, weighted, matchParent, wrapContent ]

    SizeFixed:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: fixed
            value:
              type: integer

    SizeWeighted:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: weighted
            fraction:
              type: number

    SizeMatchParent:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: matchParent
      additionalProperties: false

    SizeWrapContent:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: wrapContent
      additionalProperties: false

    Component:
      description: "Полиморфный UI-компонент"
      oneOf:
        - $ref: '#/components/schemas/Row'
        - $ref: '#/components/schemas/Box'
        - $ref: '#/components/schemas/Column'
        - $ref: '#/components/schemas/Text'
        - $ref: '#/components/schemas/Input'
        - $ref: '#/components/schemas/Image'
        - $ref: '#/components/schemas/Spacer'
        - $ref: '#/components/schemas/ProgressBar'
        - $ref: '#/components/schemas/Switch'
        - $ref: '#/components/schemas/Button'
        - $ref: '#/components/schemas/StatefulComponent'
        - $ref: '#/components/schemas/DynamicColumn'
        - $ref: '#/components/schemas/DynamicRow'
      discriminator:
        propertyName: type
        mapping:
          row: '#/components/schemas/Row'
          box: '#/components/schemas/Box'
          column: '#/components/schemas/Column'
          text: '#/components/schemas/Text'
          textField: '#/components/schemas/Input'
          image: '#/components/schemas/Image'
          spacer: '#/components/schemas/Spacer'
          progressBar: '#/components/schemas/ProgressBar'
          switch: '#/components/schemas/Switch'
          button: '#/components/schemas/Button'
          stateful: '#/components/schemas/StatefulComponent'
          dynamicColumn: '#/components/schemas/DynamicColumn'
          dynamicRow: '#/components/schemas/DynamicRow'

    ComponentBase:
      type: object
      required: [ id, type, interactions, width, height ]
      properties:
        id:
          type: string
        type:
          type: string
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/Interaction'
        insets:
          $ref: '#/components/schemas/Insets'
        width:
          $ref: '#/components/schemas/Size'
        height:
          $ref: '#/components/schemas/Size'
        backgroundColor:
          $ref: '#/components/schemas/ColorStyle'
        border:
          $ref: '#/components/schemas/Border'
        shape:
          $ref: '#/components/schemas/Shape'

    CompositeBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ children ]
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/Component'
          additionalProperties: false

    DynamicCompositeBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ itemsData, itemAlias, itemTemplate ]
          properties:
            itemsData:
              type: string
              description: "Выражение, откуда подтягивать данные"
            itemAlias:
              type: string
              description: "Алиас, для ссылки на данные"
            itemTemplate:
              $ref: '#/components/schemas/Component'
          additionalProperties: false

    ComponentTemplate:
      type: object
      required: [ name, component ]
      properties:
        name:
          type: string
        component:
          $ref: '#/components/schemas/Component'

    LeafBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ type ]

    Row:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: row }

    Box:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: box }

    Column:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: column }

    Text:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle ]
          properties:
            type: { const: text }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'

    Input:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle, rightIcon ]
          properties:
            type:
              const: input
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'
            mask:
              type: string
            rightIcon:
              $ref: '#/components/schemas/Image'
            regex:
              $ref: '#/components/schemas/Regex'
            placeholder:
              $ref: '#/components/schemas/Placeholder'
            hint:
              $ref: '#/components/schemas/Hint'
          additionalProperties: false

    Placeholder:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    Hint:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    Regex:
      type: string
      enum: [ EMAIL ]

    Image:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, imageUrl ]
          properties:
            type: { const: image }
            imageUrl:
              type: string
            badge:
              $ref: '#/components/schemas/Badge'

    Spacer:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: spacer }

    ProgressBar:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: progressBar }

    Switch:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: switch }

    Button:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, enabled, textStyle, colorStyle ]
          properties:
            type: { const: button }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'
            enabled:
              type: boolean

    Badge:
      type: object
      required: [ type, text, textStyle, colorStyle ]
      properties:
        type: { const: badge }
        text:
          type: string
        imageUrl:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'

    Border:
      type: object
      required: [ color, thickness ]
      properties:
        color:
          $ref: '#/components/schemas/ColorStyle'
        thickness:
          type: integer

    Shape:
      type: object
      required: [ type, topLeft, topRight, bottomLeft, bottomRight ]
      properties:
        type:
          type: string
          enum: [ roundedCorners ]
        topRight:
          type: integer
          default: 0
        topLeft:
          type: integer
          default: 0
        bottomRight:
          type: integer
          default: 0
        bottomLeft:
          type: integer
          default: 0

    TextStyleTemplate: # Нейминг неокончательный - это то, что будет возвращаться из реестра
      type: object
      required: [ token, size ]
      properties:
        token:
          type: string
        decoration:
          type: string
          enum: [ overline, bold, italic, underline, strikeThrough, strikeThroughRed ]
        weight:
          type: integer
        size:
          type: integer
      additionalProperties: false

    ColorStyleTemplate: # Нейминг неокончательный - это то, что будет возвращаться из реестра
      type: object
      required: [ token, hex ]
      properties:
        token:
          type: string
        hex:
          type: string
          description: "Цвет в HEX формате (#RRGGBB)"
      additionalProperties: false

    # Реестр внешних API

    ApiRepresentation:
      type: object
      description: "Описание свойств для взаимодействия с внешней API"
      required: [ id, name, description, params, endpoints, createdAtTimestampMs ]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: "Название API, условно alias для дальнейшего использования в админке"
        description:
          type: string
        params:
          type: array
          description: "Требуемые параметры для выполнения запроса к API/маппинга в схему"
          items:
            type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
        schema:
          $ref: '#/components/schemas/Schema'
        mappingScript:
          type: string
          description: "JS скрипт для превращения данных ответа API в данные соответствующие схеме"
        createdAtTimestampMs:
          type: int64
          description: "Время создания версии в мс"
        lastModifiedTimestampMs:
          type: int64
          description: "Время изменения версии в мс"

    ApiRepresentationForSave:
      type: object
      description: "Описание свойств для взаимодействия с внешней API"
      required: [ name, description, params, endpoints ]
      properties:
        name:
          type: string
          description: "Название API, условно alias для дальнейшего использования в админке"
        description:
          type: string
        params:
          type: array
          description: "Требуемые параметры для выполнения запроса к API/маппинга в схему"
          items:
            type: string
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/Endpoint'
        schema:
          $ref: '#/components/schemas/Schema'
        mappingScript:
          type: string
          description: "JS скрипт для превращения данных ответа API в данные соответствующие схеме"

    Schema:
      oneOf:
        - $ref: "#/components/schemas/SchemaObject"
        - $ref: "#/components/schemas/SchemaArray"
        - $ref: "#/components/schemas/SchemaString"
        - $ref: "#/components/schemas/SchemaNumber"
      discriminator:
        propertyName: type
        mapping:
          object: "#/components/schemas/SchemaObject"
          array: "#/components/schemas/SchemaArray"
          string: "#/components/schemas/SchemaString"
          number: "#/components/schemas/SchemaNumber"
      description: |
        Универсальная схема для представления типов: object, array, string, number.

    SchemaObject:
      type: object
      additionalProperties: false
      required: [ type, properties ]
      properties:
        type:
          const: object
        properties:
          type: object
          description: Словарь свойств объекта (поле -> схема).
          additionalProperties:
            $ref: "#/components/schemas/Schema"

    SchemaArray:
      type: object
      additionalProperties: false
      required: [ type, items ]
      properties:
        type:
          const: array
        items:
          $ref: "#/components/schemas/Schema"

    SchemaString:
      type: object
      additionalProperties: false
      required: [ type ]
      properties:
        type:
          const: string

    SchemaNumber:
      type: object
      additionalProperties: false
      required: [ type ]
      properties:
        type:
          const: number

    Endpoint:
      type: object
      description: "Модель внешнего запроса"
      required: [ url, method, responseName, timeoutMs, isRequired ]
      properties:
        url:
          type: string
          description: "Путь/URL, на который должен быть выполнен запрос"
        method:
          type: string
          description: "HTTP-метод"
          examples: [ GET ]
        responseName:
          type: string
          description: "Имя для ассоциации ответа с запросом"
        timeoutMs:
          type: integer
          format: int64
          description: "Таймаут ожидания ответа (в мс)"
          default: 5000
        isRequired:
          type: boolean
          description: "Если true — ошибка клиента при неудаче получения ответа"
      additionalProperties: false

    # CLIENT MODELS (Модели для рендеринга)

    ScreenRenderRequest:
      description: Запрос на отрисовку экрана
      type: object
      required: [ data ]
      properties:
        data:
          required: [ screenName ]
          properties:
            screenName:
              type: string
              description: "Название экрана"
            variables:
              type: object
              description: "Дополнительные переменные и их значения"
              additionalProperties:
                type: string

    RenderedScreenResponse:
      description: "Ответ на рендеринг экрана: успех или список ошибок."
      oneOf:
        - $ref: '#/components/schemas/RenderedScreenResponseSuccess'
        - $ref: '#/components/schemas/RenderedScreenResponseError'
      unevaluatedProperties: false

    RenderedScreenResponseSuccess:
      type: object
      required: [ screen ]
      properties:
        screen:
          $ref: '#/components/schemas/RenderedScreen'
      additionalProperties: false

    RenderedScreenResponseError:
      type: object
      required: [ errors ]
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false
    RenderedScreen:
      type: object
      required: [ screenName, version, components ]
      properties:
        screenName:
          type: string
        version:
          type: integer
        components:
          type: array
          items:
            $ref: '#/components/schemas/RenderedComponent'
        scaffold:
          $ref: '#/components/schemas/RenderedScaffold'
        textStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RenderedTextStyle'
        colorStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedScaffold:
      type: object
      properties:
        topBar:
          $ref: '#/components/schemas/RenderedComponent'
        bottomBar:
          $ref: '#/components/schemas/RenderedComponent'
      additionalProperties: false

    RenderedTextStyle:
      type: object
      required: [ size ]
      properties:
        decoration:
          $ref: '#/components/schemas/TextDecorationType'
        weight:
          type: integer
        size:
          type: integer
      additionalProperties: false

    RenderedColorStyle:
      type: object
      required: [ hex ]
      properties:
        hex:
          type: string
          description: "Цвет в HEX формате (#RRGGBB)"
      additionalProperties: false

    RenderedInsets:
      type: object
      required: [ left, right, bottom, top ]
      properties:
        left: { type: integer, default: 0 }
        right: { type: integer, default: 0 }
        bottom: { type: integer, default: 0 }
        top: { type: integer, default: 0 }
      additionalProperties: false

    RenderedAction:
      required: [ type ]
      description: "Вызываемое действие при взаимодействии"
      oneOf:
        - $ref: '#/components/schemas/RenderedCommandAction'
        - $ref: '#/components/schemas/RenderedUpdateScreenAction'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/RenderedCommandAction'
          updateScreen: '#/components/schemas/RenderedUpdateScreenAction'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedCommandAction:
      allOf:
        - type: object
          required: [ type, name ]
          properties:
            type:
              const: command
            name:
              type: string
              description: "Название команды, которую нужно исполнить"
            params:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    RenderedUpdateScreenAction:
      allOf:
        - type: object
          required: [ type, screenName ]
          properties:
            type:
              const: updateScreen
            screenName:
              type: string
              description: "Название экрана"
            screenNavigationParams:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    RenderedInteraction:
      type: object
      description: Базовая модель взаимодействия.
      required: [ type, actions ]
      properties:
        type:
          type: string
          enum: [ onClick, onShow ]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedAction'
      additionalProperties: true

    RenderedSize:
      required: [ type ]
      description: "Полиморфный размер"
      oneOf:
        - $ref: '#/components/schemas/RenderedSizeFixed'
        - $ref: '#/components/schemas/RenderedSizeWeighted'
        - $ref: '#/components/schemas/RenderedSizeMatchParent'
        - $ref: '#/components/schemas/RenderedSizeWrapContent'
      discriminator:
        propertyName: type
        mapping:
          fixed: '#/components/schemas/RenderedSizeFixed'
          weighted: '#/components/schemas/RenderedSizeWeighted'
          matchParent: '#/components/schemas/RenderedSizeMatchParent'
          wrapContent: '#/components/schemas/RenderedSizeWrapContent'
      properties:
        type:
          type: string
          description: "Допустимые значения: fixed, weighted, matchParent, wrapContent"
      unevaluatedProperties: false

    RenderedSizeBase:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ fixed, weighted, matchParent, wrapContent ]

    RenderedSizeFixed:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: fixed
            value:
              type: integer

    RenderedSizeWeighted:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: weighted
            fraction:
              type: number

    RenderedSizeMatchParent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: matchParent
      additionalProperties: false

    RenderedSizeWrapContent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: wrapContent
      additionalProperties: false

    RenderedComponent:
      required: [ type ]
      description: "Полиморфный UI-компонент"
      oneOf:
        - $ref: '#/components/schemas/RenderedRow'
        - $ref: '#/components/schemas/RenderedBox'
        - $ref: '#/components/schemas/RenderedColumn'
        - $ref: '#/components/schemas/RenderedText'
        - $ref: '#/components/schemas/RenderedInput'
        - $ref: '#/components/schemas/RenderedImage'
        - $ref: '#/components/schemas/RenderedSpacer'
        - $ref: '#/components/schemas/RenderedProgressBar'
        - $ref: '#/components/schemas/RenderedSwitch'
        - $ref: '#/components/schemas/RenderedButton'
      discriminator:
        propertyName: type
        mapping:
          row: '#/components/schemas/RenderedRow'
          box: '#/components/schemas/RenderedBox'
          column: '#/components/schemas/RenderedColumn'
          text: '#/components/schemas/RenderedText'
          textField: '#/components/schemas/RenderedInput'
          image: '#/components/schemas/RenderedImage'
          spacer: '#/components/schemas/RenderedSpacer'
          progressBar: '#/components/schemas/RenderedProgressBar'
          switch: '#/components/schemas/RenderedSwitch'
          button: '#/components/schemas/RenderedButton'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedComponentBase:
      type: object
      required: [ id, hash, type, interactions, width, height ]
      properties:
        id:
          type: string
        hash:
          type: string
        type:
          type: string
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedInteraction'
        insets:
          $ref: '#/components/schemas/RenderedInsets'
        width:
          $ref: '#/components/schemas/RenderedSize'
        height:
          $ref: '#/components/schemas/RenderedSize'
        backgroundColor:
          $ref: '#/components/schemas/RenderedColorStyle'
        border:
          $ref: '#/components/schemas/RenderedBorder'
        shape:
          $ref: '#/components/schemas/RenderedShape'

    RenderedCompositeBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [ children ]
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/RenderedComponent'
          additionalProperties: false

    RenderedLeafBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [ type ]

    RenderedRow:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: row }

    RenderedBox:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: box }

    RenderedColumn:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: column }

    RenderedText:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle ]
          properties:
            type: { const: text }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'

    RenderedInput:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle, rightIcon ]
          properties:
            type:
              const: input
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'
            mask:
              type: string
            rightIcon:
              $ref: '#/components/schemas/RenderedImage'
            regex:
              $ref: '#/components/schemas/RenderedRegex'
            placeholder:
              $ref: '#/components/schemas/RenderedPlaceholder'
            hint:
              $ref: '#/components/schemas/RenderedHint'
          additionalProperties: false

    RenderedPlaceholder:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedHint:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedRegex:
      type: string
      enum: [ EMAIL ]

    RenderedImage:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, imageUrl ]
          properties:
            type: { const: image }
            imageUrl:
              type: string
            badge:
              $ref: '#/components/schemas/RenderedBadge'

    RenderedSpacer:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: spacer }

    RenderedProgressBar:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: progressBar }

    RenderedSwitch:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: switch }

    RenderedButton:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, enabled, textStyle, colorStyle ]
          properties:
            type: { const: button }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'
            enabled:
              type: boolean

    RenderedBadge:
      type: object
      required: [ type, text, textStyle, colorStyle ]
      properties:
        type: { const: badge }
        text:
          type: string
        imageUrl:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'

    RenderedBorder:
      type: object
      required: [ color, thickness ]
      properties:
        color:
          $ref: '#/components/schemas/RenderedColorStyle'
        thickness:
          type: integer

    RenderedShape:
      type: object
      required: [ type, topLeft, topRight, bottomLeft, bottomRight ]
      properties:
        type:
          type: string
          enum: [ roundedCorners ]
        topRight:
          type: integer
          default: 0
        topLeft:
          type: integer
          default: 0
        bottomRight:
          type: integer
          default: 0
        bottomLeft:
          type: integer
          default: 0