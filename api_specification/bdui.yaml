openapi: 3.1.0
info:
  title: BDUI API
  version: 1.0.0
  description: |
    Спецификация OpenAPI для Backend-Driven UI  приложения

tags:
  - name: AdminScreen
    description: Операции с экранами из админки
  - name: ClientEngine
    description: Операции с экранами для выдачи клиенту
  - name: AdminTemplates
    description: Операции с шаблонами из админки

paths:
  # AdminScreen
  /v1/getScreenNames:
    post:
      summary: Получить список названий экранов
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenNamesRequest"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseSuccess'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenNamesResponseError'

  /v1/getScreen:
    post:
      summary: Получить описание экрана
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenRequest"

      responses:
        '200':
          description: Успешный ответ или ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
  /v1/saveScreen:
    post:
      summary: Сохранить новый экран
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Screen"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
  /v1/deleteScreen:
    delete:
      summary: Удаление экрана
      tags: [ AdminScreen ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenDeleteRequest"

      responses:
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenResponseError'
  # AdminTemplates

  # ClientEngine
  /v1/renderScreen:
    post:
      summary: Получить экран с данными для отрисовки
      tags: [ ClientEngine ]
      parameters:
        - in: header
          required: true
          name: userId
          description: "Идентификатор пользователя, от которого выполняется запрос"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenRenderRequest"

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponse'
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'
        '500':
          description: Внутренняя ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedScreenResponseError'

components:
  schemas:
    # ADMIN MODELS (Модели для админки)
    ScreenRequest:
      description: "Запрос на получение скелета экрана"
      type: object
      properties:
        data:
          type: object
          required: [ screenName, version ]
          properties:
            screenName:
              type: string
              description: "Название экрана"
            version:
              type: string
              description: "Версия экрана"

    ScreenNamesRequest:
      description: "Запрос на получение всех экранов по названию"
      type: object
      properties:
        data:
          type: object
          properties:
            query:
              type: string
              description: "Название экрана"

    ScreenDeleteRequest:
      description: Запрос на удаление экрана
      type: object
      required: [ data ]
      properties:
        data:
          required: [ screenName ]
          properties:
            screenName:
              type: string
              description: "Название экрана"

    ScreenResponse:
      description: "Ответ на получение экрана: успех или список ошибок."
      oneOf:
        - $ref: '#/components/schemas/ScreenResponseSuccess'
        - $ref: '#/components/schemas/ScreenResponseError'
      unevaluatedProperties: false

    ScreenResponseSuccess:
      type: object
      required: [ screen ]
      properties:
        screen:
          $ref: '#/components/schemas/Screen'
      additionalProperties: false

    ScreenResponseError:
      type: object
      required: [ errors ]
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ScreenNamesResponse:
      description: "Ответ на получение списка названий экранов"
      oneOf:
        - $ref: '#/components/schemas/ScreenNamesResponseSuccess'
        - $ref: '#/components/schemas/ScreenNamesResponseError'
      unevaluatedProperties: false

    ScreenNamesResponseSuccess:
      type: object
      required: [ screenNames ]
      properties:
        screenNames:
          type: array
          items:
            type: string
      additionalProperties: false

    ScreenNamesResponseError:
      type: object
      required: [ errors ]
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false

    ErrorContent:
      type: object
      description: "Содержимое ошибки"
      required: [ timestampMs, message ]
      properties:
        timestampMs:
          type: integer
          format: int64
          description: "Время формирования ошибки (в мс)"
        message:
          type: string
          description: "Описание ошибки"
      additionalProperties: false

    Screen:
      type: object
      required: [ screenName, version, components, apis ]
      properties:
        screenName:
          type: string
        version:
          type: integer
        screenNavigationParams:
          type: array
          items:
            type: string
        apis:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ShortApiRepresentation'
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        scaffold:
          $ref: '#/components/schemas/Scaffold'
        textStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TextStyle'
        colorStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    Scaffold:
      type: object
      properties:
        topBar:
          $ref: '#/components/schemas/Component'
        bottomBar:
          $ref: '#/components/schemas/Component'
      additionalProperties: false

    TextStyle:
      type: object
      required: [ token, size ]
      properties:
        token:
          type: string
        decoration:
          type: string
          enum: [ overline, bold, italic, underline, strikeThrough, strikeThroughRed ]
        weight:
          type: integer
        size:
          type: integer
      additionalProperties: false

    ColorStyle:
      type: object
      required: [ token, hex ]
      properties:
        token:
          type: string
        hex:
          type: string
          description: "Цвет в HEX формате (#RRGGBB)"
      additionalProperties: false

    StatefulComponent:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          properties:
            type:
              const: stateful
            states:
              type: array
              items:
                $ref: '#/components/schemas/StateDefinition'
          required: [ type, states ]
          additionalProperties: false

    StateDefinition:
      type: object
      required: [ condition, component ]
      properties:
        condition:
          type: string
        component:
          $ref: '#/components/schemas/Component'

    DynamicColumn:
      allOf:
        - $ref: '#/components/schemas/DynamicCompositeBase'
        - type: object
          properties:
            type:
              const: dynamicColumn
            items:
              type: array
              items:
                $ref: '#/components/schemas/Component'
          required: [ type, items ]
          additionalProperties: false

    DynamicRow:
      allOf:
        - $ref: '#/components/schemas/DynamicCompositeBase'
        - type: object
          properties:
            type:
              const: dynamicRow
            items:
              type: array
              items:
                $ref: '#/components/schemas/Component'
          required: [ type, items ]
          additionalProperties: false

    ShortApiRepresentation:
      type: object
      required: [ apiName, apiParams ]
      properties:
        apiName:
          type: string
        apiParams:
          type: array
          items:
            type: string
      additionalProperties: false

    Endpoint:
      type: object
      description: "Модель внешнего запроса"
      required: [ url, method, responseName, timeoutMs, isRequired ]
      properties:
        url:
          type: string
          description: "Путь/URL, на который должен быть выполнен запрос"
        method:
          type: string
          description: "HTTP-метод"
          examples: [ GET ]
        responseName:
          type: string
          description: "Имя для ассоциации ответа с запросом"
        timeoutMs:
          type: integer
          format: int64
          description: "Таймаут ожидания ответа (в мс)"
          default: 5000
        isRequired:
          type: boolean
          description: "Если true — ошибка клиента при неудаче получения ответа"
      additionalProperties: false

    Insets:
      type: object
      required: [ left, right, bottom, top ]
      properties:
        left: { type: integer, default: 0 }
        right: { type: integer, default: 0 }
        bottom: { type: integer, default: 0 }
        top: { type: integer, default: 0 }
      additionalProperties: false

    Action:
      required: [ type ]
      description: "Вызываемое действие при взаимодействии"
      oneOf:
        - $ref: '#/components/schemas/CommandAction'
        - $ref: '#/components/schemas/UpdateScreenAction'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/CommandAction'
          updateScreen: '#/components/schemas/UpdateScreenAction'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    CommandAction:
      allOf:
        - type: object
          required: [ type, name ]
          properties:
            type:
              const: command
            name:
              type: string
              description: "Название команды, которую нужно исполнить"
            params:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    UpdateScreenAction:
      allOf:
        - type: object
          required: [ type, screenName ]
          properties:
            type:
              const: updateScreen
            screenName:
              type: string
              description: "Название экрана"
            screenNavigationParams:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    Interaction:
      type: object
      description: Базовая модель взаимодействия.
      required: [ type, actions ]
      properties:
        type:
          type: string
          enum: [ onClick, onShow ]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
      additionalProperties: true

    Size:
      required: [ type ]
      description: "Полиморфный размер"
      oneOf:
        - $ref: '#/components/schemas/SizeFixed'
        - $ref: '#/components/schemas/SizeWeighted'
        - $ref: '#/components/schemas/SizeMatchParent'
        - $ref: '#/components/schemas/SizeWrapContent'
      discriminator:
        propertyName: type
        mapping:
          fixed: '#/components/schemas/SizeFixed'
          weighted: '#/components/schemas/SizeWeighted'
          matchParent: '#/components/schemas/SizeMatchParent'
          wrapContent: '#/components/schemas/SizeWrapContent'
      properties:
        type:
          type: string
          description: "Допустимые значения: fixed, weighted, matchParent, wrapContent"
      unevaluatedProperties: false

    SizeBase:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ fixed, weighted, matchParent, wrapContent ]

    SizeFixed:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: fixed
            value:
              type: integer

    SizeWeighted:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: weighted
            value:
              type: integer

    SizeMatchParent:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: matchParent
      additionalProperties: false

    SizeWrapContent:
      allOf:
        - $ref: '#/components/schemas/SizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: wrapContent
      additionalProperties: false

    Component:
      required: [ type ]
      description: "Полиморфный UI-компонент"
      oneOf:
        - $ref: '#/components/schemas/Row'
        - $ref: '#/components/schemas/Box'
        - $ref: '#/components/schemas/Column'
        - $ref: '#/components/schemas/Text'
        - $ref: '#/components/schemas/Input'
        - $ref: '#/components/schemas/Image'
        - $ref: '#/components/schemas/Spacer'
        - $ref: '#/components/schemas/ProgressBar'
        - $ref: '#/components/schemas/Switch'
        - $ref: '#/components/schemas/Button'
        - $ref: '#/components/schemas/StatefulComponent'
        - $ref: '#/components/schemas/DynamicColumn'
        - $ref: '#/components/schemas/DynamicRow'
      discriminator:
        propertyName: type
        mapping:
          row: '#/components/schemas/Row'
          box: '#/components/schemas/Box'
          column: '#/components/schemas/Column'
          text: '#/components/schemas/Text'
          textField: '#/components/schemas/Input'
          image: '#/components/schemas/Image'
          spacer: '#/components/schemas/Spacer'
          progressBar: '#/components/schemas/ProgressBar'
          switch: '#/components/schemas/Switch'
          button: '#/components/schemas/Button'
          stateful: '#/components/schemas/StatefulComponent'
          dynamicColumn: '#/components/schemas/DynamicColumn'
          dynamicRow: '#/components/schemas/DynamicRow'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    ComponentBase:
      type: object
      required: [ id, type, interactions, width, height ]
      properties:
        id:
          type: string
        type:
          type: string
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/Interaction'
        insets:
          $ref: '#/components/schemas/Insets'
        width:
          $ref: '#/components/schemas/Size'
        height:
          $ref: '#/components/schemas/Size'
        backgroundColor:
          $ref: '#/components/schemas/ColorStyle'

    CompositeBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ children, border, shape ]
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/Component'
            border:
              $ref: '#/components/schemas/Border'
            shape:
              $ref: '#/components/schemas/Shape'
          additionalProperties: false

    DynamicCompositeBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ itemsData, itemAlias, itemTemplate ]
          properties:
            itemsData:
              type: string
              description: "Выражение, откуда подтягивать данные"
            itemAlias:
              type: string
              description: "Алиас, для ссылки на данные"
            itemTemplate:
              $ref: '#/components/schemas/Component'
          additionalProperties: false

    ComponentTemplate:
      type: object
      required: [ name, component ]
      properties:
        name:
          type: string
        component:
          $ref: '#/components/schemas/Component'

    LeafBase:
      allOf:
        - $ref: '#/components/schemas/ComponentBase'
        - type: object
          required: [ type ]

    Row:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: row }

    Box:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: box }

    Column:
      allOf:
        - $ref: '#/components/schemas/CompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: column }

    Text:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle ]
          properties:
            type: { const: text }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'

    Input:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle, rightIcon ]
          properties:
            type:
              const: input
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'
            mask:
              type: string
            rightIcon:
              $ref: '#/components/schemas/Image'
            regex:
              $ref: '#/components/schemas/Regex'
            placeholder:
              $ref: '#/components/schemas/Placeholder'
            hint:
              $ref: '#/components/schemas/Hint'
          additionalProperties: false

    Placeholder:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    Hint:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'
      additionalProperties: false

    Regex:
      type: string
      enum: [ EMAIL ]

    Image:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, imageUrl ]
          properties:
            type: { const: image }
            imageUrl:
              type: string
            badge:
              $ref: '#/components/schemas/Badge'

    Spacer:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: spacer }

    ProgressBar:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: progressBar }

    Switch:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: switch }

    Button:
      allOf:
        - $ref: '#/components/schemas/LeafBase'
        - type: object
          required: [ type, text, enabled, textStyle, colorStyle, shape ]
          properties:
            type: { const: button }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/TextStyle'
            colorStyle:
              $ref: '#/components/schemas/ColorStyle'
            enabled:
              type: boolean
            shape:
              $ref: '#/components/schemas/Shape'

    Badge:
      type: object
      required: [ type, text, textStyle, colorStyle ]
      properties:
        type: { const: badge }
        text:
          type: string
        imageUrl:
          type: string
        textStyle:
          $ref: '#/components/schemas/TextStyle'
        colorStyle:
          $ref: '#/components/schemas/ColorStyle'

    Border:
      type: object
      required: [ color, thickness ]
      properties:
        color:
          $ref: '#/components/schemas/ColorStyle'
        thickness:
          type: integer

    Shape:
      type: object
      required: [ type, topLeft, topRight, bottomLeft, bottomRight ]
      properties:
        type:
          type: string
          enum: [ roundedCorners ]
        topRight:
          type: integer
          default: 0
        topLeft:
          type: integer
          default: 0
        bottomRight:
          type: integer
          default: 0
        bottomLeft:
          type: integer
          default: 0

    # CLIENT MODELS (Модели для рендеринга)

    ScreenRenderRequest:
      description: Запрос на отрисовку экрана
      type: object
      required: [ data ]
      properties:
        data:
          required: [ screenName ]
          properties:
            screenName:
              type: string
              description: "Название экрана"
            variables:
              type: object
              description: "Дополнительные переменные и их значения"
              additionalProperties:
                type: string

    RenderedScreenResponse:
      description: "Ответ на рендеринг экрана: успех или список ошибок."
      oneOf:
        - $ref: '#/components/schemas/RenderedScreenResponseSuccess'
        - $ref: '#/components/schemas/RenderedScreenResponseError'
      unevaluatedProperties: false

    RenderedScreenResponseSuccess:
      type: object
      required: [ screen ]
      properties:
        screen:
          $ref: '#/components/schemas/RenderedScreen'
      additionalProperties: false

    RenderedScreenResponseError:
      type: object
      required: [ errors ]
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorContent'
      additionalProperties: false
    RenderedScreen:
      type: object
      required: [ screenName, version, components ]
      properties:
        screenName:
          type: string
        version:
          type: integer
        components:
          type: array
          items:
            $ref: '#/components/schemas/RenderedComponent'
        scaffold:
          $ref: '#/components/schemas/RenderedScaffold'
        textStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RenderedTextStyle'
        colorStyles:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedScaffold:
      type: object
      properties:
        topBar:
          $ref: '#/components/schemas/RenderedComponent'
        bottomBar:
          $ref: '#/components/schemas/RenderedComponent'
      additionalProperties: false

    RenderedTextStyle:
      type: object
      required: [ size ]
      properties:
        decoration:
          type: string
          enum: [ overline, bold, italic, underline, strikeThrough, strikeThroughRed ]
        weight:
          type: integer
        size:
          type: integer
      additionalProperties: false

    RenderedColorStyle:
      type: object
      required: [ hex ]
      properties:
        hex:
          type: string
          description: "Цвет в HEX формате (#RRGGBB)"
      additionalProperties: false

    RenderedInsets:
      type: object
      required: [ left, right, bottom, top ]
      properties:
        left: { type: integer, default: 0 }
        right: { type: integer, default: 0 }
        bottom: { type: integer, default: 0 }
        top: { type: integer, default: 0 }
      additionalProperties: false

    RenderedAction:
      required: [ type ]
      description: "Вызываемое действие при взаимодействии"
      oneOf:
        - $ref: '#/components/schemas/RenderedCommandAction'
        - $ref: '#/components/schemas/RenderedUpdateScreenAction'
      discriminator:
        propertyName: type
        mapping:
          command: '#/components/schemas/RenderedCommandAction'
          updateScreen: '#/components/schemas/RenderedUpdateScreenAction'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedCommandAction:
      allOf:
        - type: object
          required: [ type, name ]
          properties:
            type:
              const: command
            name:
              type: string
              description: "Название команды, которую нужно исполнить"
            params:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    RenderedUpdateScreenAction:
      allOf:
        - type: object
          required: [ type, screenName ]
          properties:
            type:
              const: updateScreen
            screenName:
              type: string
              description: "Название экрана"
            screenNavigationParams:
              description: "Передаваемые параметры для исполнения команды"
              additionalProperties: true

    RenderedInteraction:
      type: object
      description: Базовая модель взаимодействия.
      required: [ type, actions ]
      properties:
        type:
          type: string
          enum: [ onClick, onShow ]
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedAction'
      additionalProperties: true

    RenderedSize:
      required: [ type ]
      description: "Полиморфный размер"
      oneOf:
        - $ref: '#/components/schemas/RenderedSizeFixed'
        - $ref: '#/components/schemas/RenderedSizeWeighted'
        - $ref: '#/components/schemas/RenderedSizeMatchParent'
        - $ref: '#/components/schemas/RenderedSizeWrapContent'
      discriminator:
        propertyName: type
        mapping:
          fixed: '#/components/schemas/RenderedSizeFixed'
          weighted: '#/components/schemas/RenderedSizeWeighted'
          matchParent: '#/components/schemas/RenderedSizeMatchParent'
          wrapContent: '#/components/schemas/RenderedSizeWrapContent'
      properties:
        type:
          type: string
          description: "Допустимые значения: fixed, weighted, matchParent, wrapContent"
      unevaluatedProperties: false

    RenderedSizeBase:
      type: object
      required: [ type ]
      properties:
        type:
          type: string
          enum: [ fixed, weighted, matchParent, wrapContent ]

    RenderedSizeFixed:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: fixed
            value:
              type: integer

    RenderedSizeWeighted:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type, value ]
          properties:
            type:
              const: weighted
            fraction:
              type: number

    RenderedSizeMatchParent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: matchParent
      additionalProperties: false

    RenderedSizeWrapContent:
      allOf:
        - $ref: '#/components/schemas/RenderedSizeBase'
        - type: object
          required: [ type ]
          properties:
            type:
              const: wrapContent
      additionalProperties: false

    RenderedComponent:
      required: [ type ]
      description: "Полиморфный UI-компонент"
      oneOf:
        - $ref: '#/components/schemas/RenderedRow'
        - $ref: '#/components/schemas/RenderedBox'
        - $ref: '#/components/schemas/RenderedColumn'
        - $ref: '#/components/schemas/RenderedText'
        - $ref: '#/components/schemas/RenderedInput'
        - $ref: '#/components/schemas/RenderedImage'
        - $ref: '#/components/schemas/RenderedSpacer'
        - $ref: '#/components/schemas/RenderedProgressBar'
        - $ref: '#/components/schemas/RenderedSwitch'
        - $ref: '#/components/schemas/RenderedButton'
      discriminator:
        propertyName: type
        mapping:
          row: '#/components/schemas/RenderedRow'
          box: '#/components/schemas/RenderedBox'
          column: '#/components/schemas/RenderedColumn'
          text: '#/components/schemas/RenderedText'
          textField: '#/components/schemas/RenderedInput'
          image: '#/components/schemas/RenderedImage'
          spacer: '#/components/schemas/RenderedSpacer'
          progressBar: '#/components/schemas/RenderedProgressBar'
          switch: '#/components/schemas/RenderedSwitch'
          button: '#/components/schemas/RenderedButton'
      properties:
        type:
          type: string
      unevaluatedProperties: false

    RenderedComponentBase:
      type: object
      required: [ id, hash, type, interactions, width, height ]
      properties:
        id:
          type: string
        hash:
          type: string
        type:
          type: string
        interactions:
          type: array
          items:
            $ref: '#/components/schemas/RenderedInteraction'
        insets:
          $ref: '#/components/schemas/RenderedInsets'

        width:
          $ref: '#/components/schemas/RenderedSize'
        height:
          $ref: '#/components/schemas/RenderedSize'
        backgroundColor:
          $ref: '#/components/schemas/RenderedColorStyle'

    RenderedCompositeBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [ children, border, shape ]
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/RenderedComponent'
            border:
              $ref: '#/components/schemas/RenderedBorder'
            shape:
              $ref: '#/components/schemas/RenderedShape'
          additionalProperties: false

    RenderedLeafBase:
      allOf:
        - $ref: '#/components/schemas/RenderedComponentBase'
        - type: object
          required: [ type ]

    RenderedRow:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: row }

    RenderedBox:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: box }

    RenderedColumn:
      allOf:
        - $ref: '#/components/schemas/RenderedCompositeBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: column }

    RenderedText:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle ]
          properties:
            type: { const: text }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'

    RenderedInput:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, textStyle, colorStyle, rightIcon ]
          properties:
            type:
              const: input
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'
            mask:
              type: string
            rightIcon:
              $ref: '#/components/schemas/RenderedImage'
            regex:
              $ref: '#/components/schemas/RenderedRegex'
            placeholder:
              $ref: '#/components/schemas/RenderedPlaceholder'
            hint:
              $ref: '#/components/schemas/RenderedHint'
          additionalProperties: false

    RenderedPlaceholder:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedHint:
      type: object
      required: [ text, textStyle, colorStyle ]
      properties:
        text:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'
      additionalProperties: false

    RenderedRegex:
      type: string
      enum: [ EMAIL ]

    RenderedImage:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, imageUrl ]
          properties:
            type: { const: image }
            imageUrl:
              type: string
            badge:
              $ref: '#/components/schemas/RenderedBadge'

    RenderedSpacer:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: spacer }

    RenderedProgressBar:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: progressBar }

    RenderedSwitch:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type ]
          properties:
            type: { const: switch }

    RenderedButton:
      allOf:
        - $ref: '#/components/schemas/RenderedLeafBase'
        - type: object
          required: [ type, text, enabled, textStyle, colorStyle, shape ]
          properties:
            type: { const: button }
            text:
              type: string
            textStyle:
              $ref: '#/components/schemas/RenderedTextStyle'
            colorStyle:
              $ref: '#/components/schemas/RenderedColorStyle'
            enabled:
              type: boolean
            shape:
              $ref: '#/components/schemas/RenderedShape'

    RenderedBadge:
      type: object
      required: [ type, text, textStyle, colorStyle ]
      properties:
        type: { const: badge }
        text:
          type: string
        imageUrl:
          type: string
        textStyle:
          $ref: '#/components/schemas/RenderedTextStyle'
        colorStyle:
          $ref: '#/components/schemas/RenderedColorStyle'

    RenderedBorder:
      type: object
      required: [ color, thickness ]
      properties:
        color:
          $ref: '#/components/schemas/RenderedColorStyle'
        thickness:
          type: integer

    RenderedShape:
      type: object
      required: [ type, topLeft, topRight, bottomLeft, bottomRight ]
      properties:
        type:
          type: string
          enum: [ roundedCorners ]
        topRight:
          type: integer
          default: 0
        topLeft:
          type: integer
          default: 0
        bottomRight:
          type: integer
          default: 0
        bottomLeft:
          type: integer
          default: 0